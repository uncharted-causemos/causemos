/*
  This file contains styles to override or reset the appearance of native
  elements (like setting default font sizes) and elements imported from custom
  stylesheets (like setting the colours used in the toaster-message library
  we're using).

  These styles are applied globally.

  If you only want to adjust some instances of an element, or if your
  element will have non-default behaviour, consider making a new
  component in `@/components/widgets/` with scoped styles instead.
*/

// Styles extracted from the uncharted-bootstrap library so that we could
//  remove that dependency.

.form-control {
  width: 100%;
  height: 37px;
  padding: 8px 16px;
  background-color: #f2f2f2;
  background-image: none;
  border-radius: 1px;
  transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
}

textarea.form-control {
  height: auto;
}

.form-group {
  margin-bottom: 15px;
}


h1, h2 {
  letter-spacing: -0.015em;
}
h3, h4 {
  letter-spacing: -0.01em;
}
h3 {
  font-size: 25px;
}
h1, h2, h3, h4, h5, h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: 1.42857;
  color: inherit;
}

button, input, select, textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  color: inherit;
  font: inherit;
}

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($color, $background) {
  color: $color;
  background-color: $background;

  &:focus{
    color: $color;
    background-color: lighten($background, 10%);
  }
  &:hover {
    color: $color;
    background-color: lighten($background, 5%);
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: lighten($background, 10%);

    &:hover,
    &:focus {
      color: $color;
      background-color: lighten($background, 7%);
    }
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus {
      background-color: $background;
    }
  }
}

.btn {
  display: inline-block;
  margin-bottom: 0; // For input.btn
  font-weight: 600;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid transparent;
  white-space: nowrap;
  padding: 8px 16px;
  font-size: 14px;
  line-height: 1.42857;
  border-radius: 1px;
  user-select: none;

  &:hover,
  &:focus {
    color: rgba(0, 0, 0, 0.89);
    text-decoration: none;
  }

  &:active,
  &.active {
    outline: 0;
    background-image: none;
    box-shadow: inset 0 3px 5px rgba(0,0,0,.125);
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
    opacity: .65;
    box-shadow: none;
  }

  @include button-variant(rgba(0, 0, 0, 0.89), #dedede);
}

a.btn {
  &.disabled,
  fieldset[disabled] & {
    pointer-events: none; // Future-proof disabling of clicks on `<a>` elements
  }
}


// Alternate buttons
// --------------------------------------------------
.btn-primary {
  @include button-variant(white, #545353);
}
// Danger and error appear as red
.btn-danger {
  @include button-variant(rgba(0, 0, 0, 0.89), hsl(4.11, 89.62, 58.43));
}

.btn-call-to-action {
  @include button-variant(white, $call-to-action-color)
}

.btn-sm {
  // line-height: ensure proper height of button next to small input
  padding: 4px 8px;
  font-size: 12px;
  line-height: 1.42857142857;
  border-radius: 1px;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.table {
  background-color: white;
}

.table > tbody > tr.active > td {
  color: white;
}

th {
  text-align: left;
}

.alert {
  padding: 15px;
  border: 1px solid #e3e3e3;
  border-radius: 1px;
}

// End of uncharted-bootstrap styles

*,
:after,
:before {
  box-sizing: border-box;
}

html {
  font-size: 10px;
}

body {
  margin: 0;
  font-family: Source Sans Pro,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;
  font-size: 14px;
  line-height: 1.42857;
  color: rgba(0,0,0,.89);
  background-color: #f2f2f2;
  -webkit-font-smoothing: antialiased; /* Chrome, Safari */
  -moz-osx-font-smoothing: grayscale; /* Firefox */
}

h5 {
  font-size: 18px;
  margin: 0;
}

.form-control {
  border: 1px solid lightgray;
  box-shadow: none;
  &:focus {
    border: 1px solid $label-color;
    outline: none;
    box-shadow: none;
    border-radius: 2px;
  }
  &::placeholder {
    color: lightgray;
  }
}

// Base styles
// --------------------------------------------------
.table,
.alert,
p {
  a {
    text-decoration: underline;
  }
}

table,
.table {
  // Cells
  > thead,
  > tbody,
  > tfoot {
    > tr {
      > th,
      > td {
        border-left: 0;
        border-right: 0;
      }
    }
  }
  > thead {
    > tr {
      > th,
      > td {
        background-color: white;
      }
    }
  }
  // Bottom align for column headings
  > thead > tr > th {
    vertical-align: bottom;
    border-bottom: 2px solid $separator;
  }
}

input {
  -webkit-appearance: none;
  appearance: none;
  margin: 0;

  &:focus {
    outline: none;

    &::-webkit-slider-thumb {
      border: 2px solid $selected;
    }
  }
}

input[type=range] {
  display: block;
  width: 100%;
}

input::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  background: #ffffff;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  margin-top: -4px;
  border: 2px solid #4E4E54;
  cursor: pointer;
}

input::-webkit-slider-runnable-track {
  background: #4E4E54;
  width: 100px;
  height: 8px;
  border-radius: 8px;
}

input[type='radio'] {
  appearance: radio;
  cursor: pointer;
  position: relative;
  bottom: -2px;
}

.fa-check-square-o::before {
  // HACK: reduce the visible shift when you
  //  check a checkbox
  margin-left: 2px;
}

// Overrides style for closing button in vue-toasted
.toasted.toasted-primary.error {
  a {
    font-size: inherit;
    color: #EEE;
  }
}

// Lex overrides
//  These need to be global because lex-assistant-box is created directly as a
//  child of the <body> element, so :deep scoped styles can't access it.
@import '~@uncharted.software/lex/dist/lex.scss';

// Need `div.lex-assistant-box` instead of just `.lex-assistant-box` to have
//  higher specificity than the default lex styles.
div.lex-assistant-box {
  z-index: 99;
  max-width: 50vw !important; // lex sets this style in-line and require important flag
  border-radius: 4px; // Match dropdown-control
  box-shadow: 0 -1px 0 #e5e5e5, 0 0 2px rgba(0,0,0,.12), 0 2px 4px rgba(0,0,0,.24);
  overflow: hidden;
  .selectable { // this is backup just in case we have a really long identifier
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  ul li {
    color: $text-color-dark; // Override lex styles
    padding: 8px 12px; // Match dropdown-control
  }

  ul li.selectable.active {
    background-color: #EAEBEC; // Match dropdown-control
    color: $text-color-dark; // Override lex styles
  }
}
