// Styles extracted from the uncharted-bootstrap library so that we could
//  remove that dependency.

// TODO: remove import
// @import "~bootstrap-sass/assets/stylesheets/_bootstrap";

// Bootstrap: Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Grid system
// Number of columns in the grid.
$grid-columns: 12 !default;
// Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width: 30px !default;

$screen-sm-min: 768px;
$screen-md-min: 992px;
$screen-lg-min: 1200px;

// Framework grid generation
// Used only by Bootstrap to generate the correct number of grid classes given
//  any value of `$grid-columns`.
@mixin make-grid-columns($i: 1, $list: ".col-sm-#{$i}, .col-md-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-sm-#{$i}, .col-md-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

.form-control {
  width: 100%;
  height: 37px;
  padding: 8px 16px;
  border-radius: 1px;
  transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}

textarea.form-control {
  height: auto;
}

.form-group {
  margin-bottom: 15px;
}



// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    width: (720px + $grid-gutter-width);
  }
  @media (min-width: $screen-md-min) {
    width: (940px + $grid-gutter-width);
  }
  @media (min-width: $screen-lg-min) {
    width: (1140px + $grid-gutter-width)
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  margin-left:  ceil(($grid-gutter-width / -2));
  margin-right: floor(($grid-gutter-width / -2));
  @include clearfix;
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


h1, h2 {
  letter-spacing: -0.015em;
}
h3, h4 {
  letter-spacing: -0.01em;
}
h3 {
  font-size: 25px;
}
// h1, h2, h3 {
//   margin-top: 19px;
//   margin-bottom: 9.5px;
// }
h1, h2, h3, h4, h5, h6 {
  // font-family: inherit;
  font-weight: 600;
  line-height: 1.42857;
  // color: inherit;
}


// Typography
// --------------------------------------------------

button, input, select, textarea {
  // TODO: keep these
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}
// button, html input[type=button], input[type=reset], input[type=submit] {
//   -webkit-appearance: button;
//   cursor: pointer;
// }
// button, select {
//   text-transform: none;
// }
// button {
//   overflow: visible;
// }
// button, input, optgroup, select, textarea {
//   color: inherit;
//   font: inherit;
// }

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:focus,
  &.focus {
    color: $color;
    background-color: lighten($background, 10%);
        border-color: lighten($border, 25%);
  }
  &:hover {
    color: $color;
    background-color: lighten($background, 5%);
        border-color: lighten($border, 6%);
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: lighten($background, 10%);
        border-color: lighten($border, 12%);

    &:hover,
    &:focus,
    &.focus {
      color: $color;
      background-color: lighten($background, 7%);
          border-color: lighten($border, 25%);
    }
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus,
    &.focus {
      background-color: $background;
          border-color: $border;
    }
  }
}

// TODO: uncharted base

// Base colour hue
$primary-hue: 358 !default;


//== Typography
//
//## Font, line-height, and color for body text, headings, and more.

// $font-family-base: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol" !default;

.btn {
  display: inline-block;
  margin-bottom: 0; // For input.btn
  font-weight: 600;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid transparent;
  white-space: nowrap;
  padding: 8px 16px;
  font-size: 14px;
  line-height: 1.42857;
  border-radius: 1px;
  user-select: none;

  &:hover,
  &:focus,
  &.focus {
    color: rgba(0, 0, 0, 0.89);
    text-decoration: none;
  }

  &:active,
  &.active {
    outline: 0;
    background-image: none;
    box-shadow: inset 0 3px 5px rgba(0,0,0,.125);
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
    opacity: .65;
    box-shadow: none;
  }

}

a.btn {
  &.disabled,
  fieldset[disabled] & {
    pointer-events: none; // Future-proof disabling of clicks on `<a>` elements
  }
}


// Alternate buttons
// --------------------------------------------------
.btn-default {
  @include button-variant(
    rgba(0, 0, 0, 0.89),
    hsl($primary-hue, 0, 87),
    hsl($primary-hue, 0, 87)
  );
}
.btn-primary {
  @include button-variant(
    white,
    hsl($primary-hue, 0.5, 32.84),
    hsl($primary-hue, 0.5, 32.84)
  );
}
// Danger and error appear as red
.btn-danger {
  @include button-variant(
    rgba(0, 0, 0, 0.89),
    hsl(4.11, 89.62, 58.43),
    hsl(4.11, 89.62, 58.43)
  );
}

.btn-sm {
  // line-height: ensure proper height of button next to small input
  padding: 4px 8px;
  font-size: 12px;
  line-height: 1.42857142857;
  border-radius: 1px;
}

.table > tbody > tr.active > td {
  color: white;
}

th {
  text-align: left;
}

.alert {
  padding: 15px;
  border: 1px solid #e3e3e3;
  border-radius: 1px;
}
