// Styles extracted from the uncharted-bootstrap library so that we could
//  that dependency.

// TODO: remove import
// @import "~bootstrap-sass/assets/stylesheets/_bootstrap";

// Bootstrap: Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Bootstrap grid
//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Extra small screen / phone
//** Deprecated `$screen-xs` as of v3.0.1
$screen-xs:                  480px !default;
//** Deprecated `$screen-xs-min` as of v3.2.0
$screen-xs-min:              $screen-xs !default;
//** Deprecated `$screen-phone` as of v3.0.1
$screen-phone:               $screen-xs-min !default;

// Small screen / tablet
//** Deprecated `$screen-sm` as of v3.0.1
$screen-sm:                  768px !default;
$screen-sm-min:              $screen-sm !default;
//** Deprecated `$screen-tablet` as of v3.0.1
$screen-tablet:              $screen-sm-min !default;

// Medium screen / desktop
//** Deprecated `$screen-md` as of v3.0.1
$screen-md:                  992px !default;
$screen-md-min:              $screen-md !default;
//** Deprecated `$screen-desktop` as of v3.0.1
$screen-desktop:             $screen-md-min !default;

// Large screen / wide desktop
//** Deprecated `$screen-lg` as of v3.0.1
$screen-lg:                  1200px !default;
$screen-lg-min:              $screen-lg !default;
//** Deprecated `$screen-lg-desktop` as of v3.0.1
$screen-lg-desktop:          $screen-lg-min !default;

// So media queries don't overlap when required, provide a maximum
$screen-xs-max:              ($screen-sm-min - 1) !default;
$screen-sm-max:              ($screen-md-min - 1) !default;
$screen-md-max:              ($screen-lg-min - 1) !default;


//== Variables: Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
$grid-columns:              12 !default;
//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:         30px !default;


//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
$container-tablet:             (720px + $grid-gutter-width) !default;
//** For `$screen-sm-min` and up.
$container-sm:                 $container-tablet !default;

// Medium screen / desktop
$container-desktop:            (940px + $grid-gutter-width) !default;
//** For `$screen-md-min` and up.
$container-md:                 $container-desktop !default;

// Large screen / wide desktop
$container-large-desktop:      (1140px + $grid-gutter-width) !default;
//** For `$screen-lg-min` and up.
$container-lg:                 $container-large-desktop !default;


//
// Grid system
// --------------------------------------------------

// Mixins: Grid system
//
// Generate semantic grid columns with these mixins.

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// // Generate the small columns
// @mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
//   position: relative;
//   min-height: 1px;
//   padding-left:  ($gutter / 2);
//   padding-right: ($gutter / 2);

//   @media (min-width: $screen-sm-min) {
//     float: left;
//     width: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-sm-column-offset($columns) {
//   @media (min-width: $screen-sm-min) {
//     margin-left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-sm-column-push($columns) {
//   @media (min-width: $screen-sm-min) {
//     left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-sm-column-pull($columns) {
//   @media (min-width: $screen-sm-min) {
//     right: percentage(($columns / $grid-columns));
//   }
// }

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}



// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include make-row;
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}


h1, h2 {
  letter-spacing: -0.015em;
}
h3, h4 {
  letter-spacing: -0.01em;
}
h3 {
  font-size: 25px;
}
// h1, h2, h3 {
//   margin-top: 19px;
//   margin-bottom: 9.5px;
// }
h1, h2, h3, h4, h5, h6 {
  // font-family: inherit;
  font-weight: 600;
  line-height: 1.42857;
  // color: inherit;
}


// Typography
// --------------------------------------------------

button, input, select, textarea {
  // TODO: keep these
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}
// button, html input[type=button], input[type=reset], input[type=submit] {
//   -webkit-appearance: button;
//   cursor: pointer;
// }
// button, select {
//   text-transform: none;
// }
// button {
//   overflow: visible;
// }
// button, input, optgroup, select, textarea {
//   color: inherit;
//   font: inherit;
// }

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

// TODO: simplify and distribute this
@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:focus,
  &.focus {
    color: $color;
    background-color: darken($background, 10%);
        border-color: darken($border, 25%);
  }
  &:hover {
    color: $color;
    background-color: darken($background, 10%);
        border-color: darken($border, 12%);
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: darken($background, 10%);
        border-color: darken($border, 12%);

    &:hover,
    &:focus,
    &.focus {
      color: $color;
      background-color: darken($background, 17%);
          border-color: darken($border, 25%);
    }
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus,
    &.focus {
      background-color: $background;
          border-color: $border;
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}

// TODO: uncharted base


//=== Color Base

// 1. Find a color you like
// 2. Convert to Hsl (Hue, Saturation, Lightness)
// 3. Add the hue value to $primary-hue
// 4. Add the saturation and lightness values to $color-primary
// 5. Enjoy the custom color theme

// Base colour hue
$primary-hue: 358 !default;


//=== Colors

// Primary or brand color
$color-primary: hsl($primary-hue, 75.2, 50.98) !default;

// Border colors
$color-border-light: hsl($primary-hue, 0, 89) !default;
$color-border-dark: hsl($primary-hue, 3.09, 10.67) !default;

// Button default
$color-btn-default: hsl($primary-hue, 0, 87) !default;
$color-btn-default-hover: hsl($primary-hue, 14.33, 84.82) !default;
$color-btn-default-disable: lighten($color-btn-default, 25%) !default;

// Button primary
$color-btn-primary: hsl($primary-hue, 0.5, 32.84) !default;
$color-btn-primary-hover: hsl($primary-hue, 5.26, 31.35) !default;
$color-btn-primary-disable: lighten($color-btn-primary, 25%) !default;



//
// Variables
// --------------------------------------------------

//== Scaffolding
//
//## Settings for some of the most global styles.

//** Global text color on `<body>`.
$text-color: rgba(0, 0, 0, 0.89) !default;

//** Global textual link color.
$link-color: magenta !default;
//** Link hover color set via `darken()` function.
$link-hover-color: rgba(0, 0, 0, 0.89) !default;
//** Link hover decoration.
$link-hover-decoration: underline !default;

//== Typography
//
//## Font, line-height, and color for body text, headings, and more.

$font-family-base: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol" !default;

$font-size-base: 14px !default;
// Use large (class="copy") for prolonged reading like articles or blog posts
$font-size-large: ceil(($font-size-base * 1.142857142)) !default;
$font-size-small: ceil(($font-size-base * 0.85714285714)) !default;

// Headings
$font-size-h1: floor(($font-size-base * 2.85714285714)) !default;
$font-size-h2: floor(($font-size-base * 2.28571428571)) !default;
$font-size-h3: ceil(($font-size-base * 1.78571428571)) !default;
$font-size-h4: ceil(($font-size-base * 1.42857142857)) !default;
$font-size-h5: ceil(($font-size-base * 1.28571428571)) !default;
$font-size-h6: ceil(($font-size-base * 1.14285714286)) !default;

//** Unit-less `line-height` for use in components like buttons.
// Base line-height
$line-height-base: 1.42857142857 !default;

//** Computed "line-height" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.
$line-height-computed: floor(
  ($font-size-base * $line-height-base)
) !default; // ~20px

//** By default, this inherits from the `<body>`.
$headings-font-family: inherit !default;
$headings-font-weight: 600 !default;
$headings-line-height: 1.42857142857;
$headings-color: inherit !default;

//== Components
//

//== Tables
//
//** Border color for table and cell borders.

//== Buttons
//
//## For each of Bootstrap's buttons, define text, background and border color.


$btn-default-color: rgba(0, 0, 0, 0.89) !default;
$btn-default-bg: $color-btn-default !default;
$btn-default-border: $color-btn-default !default;

$btn-primary-color: white !default;
$btn-primary-bg: $color-btn-primary !default;
$btn-primary-border: $color-btn-primary !default;

$color-danger: hsl(4.11, 89.62, 58.43) !default;
$btn-danger-color: rgba(0, 0, 0, 0.89) !default;
$btn-danger-bg: $color-danger !default;
$btn-danger-border: $color-danger !default;


//
// Buttons
// --------------------------------------------------


// Base styles
// --------------------------------------------------


// Button sizes
@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
  border-radius: $border-radius;
}

.btn {
  display: inline-block;
  margin-bottom: 0; // For input.btn
  font-weight: 600;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid transparent;
  white-space: nowrap;
  @include button-size(8px, 16px, 14px, 1.42857, 1px);
  user-select: none;

  &:hover,
  &:focus,
  &.focus {
    color: $btn-default-color;
    text-decoration: none;
  }

  &:active,
  &.active {
    outline: 0;
    background-image: none;
    box-shadow: inset 0 3px 5px rgba(0,0,0,.125);
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
    opacity: .65;
    box-shadow: none;
  }

}

a.btn {
  &.disabled,
  fieldset[disabled] & {
    pointer-events: none; // Future-proof disabling of clicks on `<a>` elements
  }
}


// Alternate buttons
// --------------------------------------------------

.btn-default {
  @include button-variant($btn-default-color, $btn-default-bg, $btn-default-border);
}
.btn-primary {
  @include button-variant($btn-primary-color, $btn-primary-bg, $btn-primary-border);
}
// Danger and error appear as red
.btn-danger {
  @include button-variant($btn-danger-color, $btn-danger-bg, $btn-danger-border);
}


// Link buttons
// -------------------------

// Make a button look and behave like a link
.btn-link {
  color: $link-color;
  font-weight: normal;
  border-radius: 0;

  &,
  &:active,
  &.active,
  &[disabled],
  fieldset[disabled] & {
    background-color: transparent;
    box-shadow: none;
  }
  &,
  &:hover,
  &:focus,
  &:active {
    border-color: transparent;
  }
  &:hover,
  &:focus {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
    background-color: transparent;
  }
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus {
      color: magenta;
      text-decoration: none;
    }
  }
}


// Button Sizes
// --------------------------------------------------

.btn-sm {
  // line-height: ensure proper height of button next to small input
  @include button-size(4px, 8px, $font-size-small, $line-height-base, 1px);
}


// Block button
// --------------------------------------------------

.btn-block {
  display: block;
  width: 100%;
}

// Vertically space out multiple block buttons
.btn-block + .btn-block {
  margin-top: 5px;
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}


//
// Tables
// --------------------------------------------------

.table > tbody > tr.active > td {
  color: white;
}

// Hover effect
.table-hover {
  > tbody > tr:hover {
  }
}

// Tabs
// -------------------------

// Give the tabs something to sit on
.nav-tabs {
  > li {
    > a {
      &:hover,
      &:focus {
        color: rgba(0, 0, 0, 0.89);
      }
    }
  }
}

// Pills
// -------------------------

.form-control {
  border: 1px solid $color-border-light;
  box-shadow: none;
  &:focus {
    border: 1px solid $color-btn-primary-hover;
    outline: 1px solid $color-btn-primary-hover;
    box-shadow: none;
    border-radius: 2px;
  }
}


// Base styles
// --------------------------------------------------

.navbar {
  a {
    font-weight: 600;
  }
}

.table,
.alert,
p {
  a {
    text-decoration: underline;
  }
}
.btn-link {
  text-decoration: underline;
}

table,
.table {
  // Cells
  > thead,
  > tbody,
  > tfoot {
    > tr {
      > th,
      > td {
        border-left: 0;
        border-right: 0;
      }
    }
  }
  // Bottom align for column headings
  > thead > tr > th {
    vertical-align: bottom;
    border-bottom: 2px solid $color-border-light;
  }
}


// Text color overrides
// --------------------------------------------------

// Text dark disable
.form-control::-moz-placeholder {
  color: black;
  opacity: 0.4;
}
.form-control:-ms-input-placeholder,
.form-control::-webkit-input-placeholder {
  color: grey;
}
